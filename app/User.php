<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Contracts\Auth\CanResetPassword;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Bican\Roles\Traits\HasRoleAndPermission;
use Bican\Roles\Contracts\HasRoleAndPermission as HasRoleAndPermissionContract;

class User extends Authenticatable implements HasRoleAndPermissionContract, CanResetPassword
{
    use HasRoleAndPermission;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'firstname', 'lastname', 'email', 'password', 'status',
    ];

    /**
     * The attributes excluded from the model's JSON form.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * Getter method thae reformat a carbon instance
     * @param $date
     * @return string
     */
    public function getCreatedAtAttribute($date)
    {
       return Carbon::createFromFormat('Y-m-d H:i:s', $date)->toAtomString();
    }

    /**
     * Getter method thae reformat a carbon instance
     * @param $date
     * @return string
     */
    public function getUpdatedAtAttribute($date)
    {
        return Carbon::createFromFormat('Y-m-d H:i:s', $date)->toAtomString();
//        return Carbon::createFromFormat('Y-m-d H:i:s', $date)->diffForHumans();
    }

    /**
     * Scope query that implement AND keyword for searching the database
     *
     * @param $query
     * @param $email
     * @param $password
     * @return mixed
     */
    public function scopeAuthUserExists($query, $email, $password)
    {
        return $query->where('email', '=', $email)->where('password', '=', $password);
    }

    /**
     * Reformats user's fullname
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->lastname .', '. $this->firstname;
    }

    /**
     * Relationship build
     * a user belongsTo or say a user is having many roles in english terms
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function roles()
    {
        return $this->belongsToMany('App\Role')->withTimestamps();
    }

    /**
     * Relationship build
     * a user belongsTo or say a user is having many permissions in english terms
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function permissions()
    {
        return $this->belongsToMany('App\Permission')->withTimestamps();
    }


    /**
     * Return user that is a marker
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function marketer()
    {
        return $this->hasOne('\App\Marketer');
    }


    /**
     * returns all airtime generated buy the user
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function schedules()
    {
        return $this->hasMany('App\Schedule');
    }


    /**
     * return user image uploaded data
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function upload()
    {
        return $this->hasOne('\App\Upload');
    }

    /**
     * All the target created by user
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function targets()
    {
        return $this->hasMany('App\Target');
    }

    public function assessments() {

        return $this->hasMany('App\Assessment');
    }

    public function supervise() {

        return $this->hasMany('App\AssessmentSupervisor');
    }


    /**
     * this is only accessible if the user ia having a 'driver' role
     * it returns all the reports generated by the user
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function driver_reports()
    {
        return $this->hasMany('App\DriverReport');
    }
}
